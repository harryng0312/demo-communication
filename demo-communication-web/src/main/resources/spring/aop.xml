<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <import resource="classpath:spring/db.xml"/>
    <aop:aspectj-autoproxy/>
    <!-- processor aspect -->
    <!--    <bean id="processorOutputResolver" class="com.videabiz.badgechain.aop.ProcessorOutputResolver"/>-->
    <!--    <aop:config>-->
    <!--        <aop:aspect id="aspectProcessorOutputResolver" ref="processorOutputResolver">-->
    <!--            <aop:pointcut id="resolverOutputResultPointcut"-->
    <!--                          expression="execution(public * com.videabiz.badgechain.processor..*.*(..))"/>-->
    <!--            <aop:around method="processOutputResult" pointcut-ref="resolverOutputResultPointcut"/>-->
    <!--        </aop:aspect>-->
    <!--    </aop:config>-->

    <!-- transaction aspect -->
    <!-- aspectj -->
    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="requiredTxAdvicePersistence" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="search*" propagation="SUPPORTS"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <tx:advice id="requiredTxAdvice" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="search*" propagation="SUPPORTS"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <tx:advice id="supportTxAdvice" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="search*" propagation="SUPPORTS"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>

    <tx:advice id="notSupportTxAdvice" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="search*" propagation="SUPPORTS"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="NOT_SUPPORTED"/>
        </tx:attributes>
    </tx:advice>

    <!-- ensure that the above transactional advice runs for any execution
      of an operation defined by the FooService interface -->
    <aop:config>
        <aop:pointcut
                id="persistenceOperation"
                expression="execution(public * org.harryng.demo..persistence.*.*(..)) &amp;&amp; !execution(public * getEntityManager(..)) &amp;&amp; !execution(public * getEntityClass())"/>
<!--        <aop:pointcut-->
<!--                id="serviceOperation"-->
<!--                expression="execution(public * org.harryng.demo..service.*.*(org.harryng.demo.api.util.SessionHolder,..)) &amp;&amp; !execution(public * getPersistence(..)) &amp;&amp; !@annotation(org.springframework.transaction.annotation.Transactional)"/>-->
        <aop:pointcut
                id="serviceOperation"
                expression="execution(public * org.harryng.demo..service.*.*(org.harryng.demo.api.util.SessionHolder,..)) &amp;&amp; !@annotation(org.springframework.transaction.annotation.Transactional)"/>

        <aop:pointcut
                id="rsControllerOperation"
                expression="execution(public * org.harryng.demo.controller.rs.*.*(org.harryng.demo.api.util.SessionHolder,..))"/>
        <aop:pointcut
                id="grpcControllerOperation"
                expression="execution(public * org.harryng.demo.controller.grpc.*.*(..))"/>
        <aop:advisor
                id="persistenceAdvisor" pointcut-ref="persistenceOperation"
                advice-ref="requiredTxAdvicePersistence" order="1000"/>
        <aop:advisor id="serviceAdvisor" pointcut-ref="serviceOperation" advice-ref="notSupportTxAdvice" order="1000"/>

<!--        <aop:aspect ref="logging" order="10">-->
<!--            <aop:around method="around" pointcut-ref="serviceOperation"/>-->
<!--        </aop:aspect>-->
<!--        <aop:aspect ref="logging" order="10">-->
<!--            <aop:around method="around" pointcut-ref="persistenceOperation"/>-->
<!--        </aop:aspect>-->

        <aop:aspect ref="logging" order="10">
            <aop:around method="around" pointcut-ref="rsControllerOperation"/>
        </aop:aspect>
        <aop:aspect ref="logging" order="10">
            <aop:around method="around" pointcut-ref="grpcControllerOperation"/>
        </aop:aspect>

        <aop:aspect ref="httpSessionWrapper" order="20">
            <aop:around method="around" pointcut-ref="rsControllerOperation"/>
        </aop:aspect>
        <aop:aspect ref="auth" order="50">
            <aop:around method="around" pointcut-ref="rsControllerOperation"/>
        </aop:aspect>
<!--        <aop:aspect ref="httpSessionWrapper" order="20">-->
<!--            <aop:around method="around" pointcut-ref="serviceOperation"/>-->
<!--        </aop:aspect>-->
<!--        <aop:aspect ref="auth" order="50">-->
<!--            <aop:around method="around" pointcut-ref="serviceOperation"/>-->
<!--        </aop:aspect>-->
    </aop:config>
    <bean id="logging" class="org.harryng.demo.aop.LoggingAspect"/>
    <bean id="auth" class="org.harryng.demo.aop.AuthenticationAspect"/>
    <bean id="httpSessionWrapper" class="org.harryng.demo.aop.HttpSessionWrapperAspect"/>
</beans>
