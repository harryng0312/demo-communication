// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller/Asset.proto

// Protobuf Java Version: 3.25.3
package org.harryng.demo.controller.grpc.asset;

/**
 * Protobuf service {@code controller.AssetController}
 */
public  abstract class AssetController
    implements com.google.protobuf.Service {
  protected AssetController() {}

  public interface Interface {
    /**
     * <code>rpc findById(.controller.AssetIdReq) returns (.controller.AssetResultRes);</code>
     */
    public abstract void findById(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetIdReq request,
        com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetResultRes> done);

    /**
     * <code>rpc add(.controller.AssetReq) returns (.controller.AssetRes);</code>
     */
    public abstract void add(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetReq request,
        com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done);

    /**
     * <code>rpc edit(.controller.AssetReq) returns (.controller.AssetRes);</code>
     */
    public abstract void edit(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetReq request,
        com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done);

    /**
     * <code>rpc remove(.controller.AssetIdReq) returns (.controller.AssetRes);</code>
     */
    public abstract void remove(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetIdReq request,
        com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done);

    /**
     * <code>rpc findByName(.controller.AssetNameReq) returns (.controller.AssetResultRes);</code>
     */
    public abstract void findByName(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetNameReq request,
        com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetResultRes> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new AssetController() {
      @java.lang.Override
      public  void findById(
          com.google.protobuf.RpcController controller,
          org.harryng.demo.controller.grpc.asset.AssetIdReq request,
          com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetResultRes> done) {
        impl.findById(controller, request, done);
      }

      @java.lang.Override
      public  void add(
          com.google.protobuf.RpcController controller,
          org.harryng.demo.controller.grpc.asset.AssetReq request,
          com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done) {
        impl.add(controller, request, done);
      }

      @java.lang.Override
      public  void edit(
          com.google.protobuf.RpcController controller,
          org.harryng.demo.controller.grpc.asset.AssetReq request,
          com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done) {
        impl.edit(controller, request, done);
      }

      @java.lang.Override
      public  void remove(
          com.google.protobuf.RpcController controller,
          org.harryng.demo.controller.grpc.asset.AssetIdReq request,
          com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done) {
        impl.remove(controller, request, done);
      }

      @java.lang.Override
      public  void findByName(
          com.google.protobuf.RpcController controller,
          org.harryng.demo.controller.grpc.asset.AssetNameReq request,
          com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetResultRes> done) {
        impl.findByName(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.findById(controller, (org.harryng.demo.controller.grpc.asset.AssetIdReq)request);
          case 1:
            return impl.add(controller, (org.harryng.demo.controller.grpc.asset.AssetReq)request);
          case 2:
            return impl.edit(controller, (org.harryng.demo.controller.grpc.asset.AssetReq)request);
          case 3:
            return impl.remove(controller, (org.harryng.demo.controller.grpc.asset.AssetIdReq)request);
          case 4:
            return impl.findByName(controller, (org.harryng.demo.controller.grpc.asset.AssetNameReq)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return org.harryng.demo.controller.grpc.asset.AssetIdReq.getDefaultInstance();
          case 1:
            return org.harryng.demo.controller.grpc.asset.AssetReq.getDefaultInstance();
          case 2:
            return org.harryng.demo.controller.grpc.asset.AssetReq.getDefaultInstance();
          case 3:
            return org.harryng.demo.controller.grpc.asset.AssetIdReq.getDefaultInstance();
          case 4:
            return org.harryng.demo.controller.grpc.asset.AssetNameReq.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return org.harryng.demo.controller.grpc.asset.AssetResultRes.getDefaultInstance();
          case 1:
            return org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance();
          case 2:
            return org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance();
          case 3:
            return org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance();
          case 4:
            return org.harryng.demo.controller.grpc.asset.AssetResultRes.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc findById(.controller.AssetIdReq) returns (.controller.AssetResultRes);</code>
   */
  public abstract void findById(
      com.google.protobuf.RpcController controller,
      org.harryng.demo.controller.grpc.asset.AssetIdReq request,
      com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetResultRes> done);

  /**
   * <code>rpc add(.controller.AssetReq) returns (.controller.AssetRes);</code>
   */
  public abstract void add(
      com.google.protobuf.RpcController controller,
      org.harryng.demo.controller.grpc.asset.AssetReq request,
      com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done);

  /**
   * <code>rpc edit(.controller.AssetReq) returns (.controller.AssetRes);</code>
   */
  public abstract void edit(
      com.google.protobuf.RpcController controller,
      org.harryng.demo.controller.grpc.asset.AssetReq request,
      com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done);

  /**
   * <code>rpc remove(.controller.AssetIdReq) returns (.controller.AssetRes);</code>
   */
  public abstract void remove(
      com.google.protobuf.RpcController controller,
      org.harryng.demo.controller.grpc.asset.AssetIdReq request,
      com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done);

  /**
   * <code>rpc findByName(.controller.AssetNameReq) returns (.controller.AssetResultRes);</code>
   */
  public abstract void findByName(
      com.google.protobuf.RpcController controller,
      org.harryng.demo.controller.grpc.asset.AssetNameReq request,
      com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetResultRes> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return org.harryng.demo.controller.grpc.asset.Asset.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.findById(controller, (org.harryng.demo.controller.grpc.asset.AssetIdReq)request,
          com.google.protobuf.RpcUtil.<org.harryng.demo.controller.grpc.asset.AssetResultRes>specializeCallback(
            done));
        return;
      case 1:
        this.add(controller, (org.harryng.demo.controller.grpc.asset.AssetReq)request,
          com.google.protobuf.RpcUtil.<org.harryng.demo.controller.grpc.asset.AssetRes>specializeCallback(
            done));
        return;
      case 2:
        this.edit(controller, (org.harryng.demo.controller.grpc.asset.AssetReq)request,
          com.google.protobuf.RpcUtil.<org.harryng.demo.controller.grpc.asset.AssetRes>specializeCallback(
            done));
        return;
      case 3:
        this.remove(controller, (org.harryng.demo.controller.grpc.asset.AssetIdReq)request,
          com.google.protobuf.RpcUtil.<org.harryng.demo.controller.grpc.asset.AssetRes>specializeCallback(
            done));
        return;
      case 4:
        this.findByName(controller, (org.harryng.demo.controller.grpc.asset.AssetNameReq)request,
          com.google.protobuf.RpcUtil.<org.harryng.demo.controller.grpc.asset.AssetResultRes>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return org.harryng.demo.controller.grpc.asset.AssetIdReq.getDefaultInstance();
      case 1:
        return org.harryng.demo.controller.grpc.asset.AssetReq.getDefaultInstance();
      case 2:
        return org.harryng.demo.controller.grpc.asset.AssetReq.getDefaultInstance();
      case 3:
        return org.harryng.demo.controller.grpc.asset.AssetIdReq.getDefaultInstance();
      case 4:
        return org.harryng.demo.controller.grpc.asset.AssetNameReq.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return org.harryng.demo.controller.grpc.asset.AssetResultRes.getDefaultInstance();
      case 1:
        return org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance();
      case 2:
        return org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance();
      case 3:
        return org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance();
      case 4:
        return org.harryng.demo.controller.grpc.asset.AssetResultRes.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends org.harryng.demo.controller.grpc.asset.AssetController implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void findById(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetIdReq request,
        com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetResultRes> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        org.harryng.demo.controller.grpc.asset.AssetResultRes.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          org.harryng.demo.controller.grpc.asset.AssetResultRes.class,
          org.harryng.demo.controller.grpc.asset.AssetResultRes.getDefaultInstance()));
    }

    public  void add(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetReq request,
        com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          org.harryng.demo.controller.grpc.asset.AssetRes.class,
          org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance()));
    }

    public  void edit(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetReq request,
        com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          org.harryng.demo.controller.grpc.asset.AssetRes.class,
          org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance()));
    }

    public  void remove(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetIdReq request,
        com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetRes> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          org.harryng.demo.controller.grpc.asset.AssetRes.class,
          org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance()));
    }

    public  void findByName(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetNameReq request,
        com.google.protobuf.RpcCallback<org.harryng.demo.controller.grpc.asset.AssetResultRes> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        org.harryng.demo.controller.grpc.asset.AssetResultRes.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          org.harryng.demo.controller.grpc.asset.AssetResultRes.class,
          org.harryng.demo.controller.grpc.asset.AssetResultRes.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public org.harryng.demo.controller.grpc.asset.AssetResultRes findById(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetIdReq request)
        throws com.google.protobuf.ServiceException;

    public org.harryng.demo.controller.grpc.asset.AssetRes add(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetReq request)
        throws com.google.protobuf.ServiceException;

    public org.harryng.demo.controller.grpc.asset.AssetRes edit(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetReq request)
        throws com.google.protobuf.ServiceException;

    public org.harryng.demo.controller.grpc.asset.AssetRes remove(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetIdReq request)
        throws com.google.protobuf.ServiceException;

    public org.harryng.demo.controller.grpc.asset.AssetResultRes findByName(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetNameReq request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public org.harryng.demo.controller.grpc.asset.AssetResultRes findById(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetIdReq request)
        throws com.google.protobuf.ServiceException {
      return (org.harryng.demo.controller.grpc.asset.AssetResultRes) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        org.harryng.demo.controller.grpc.asset.AssetResultRes.getDefaultInstance());
    }


    public org.harryng.demo.controller.grpc.asset.AssetRes add(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetReq request)
        throws com.google.protobuf.ServiceException {
      return (org.harryng.demo.controller.grpc.asset.AssetRes) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance());
    }


    public org.harryng.demo.controller.grpc.asset.AssetRes edit(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetReq request)
        throws com.google.protobuf.ServiceException {
      return (org.harryng.demo.controller.grpc.asset.AssetRes) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance());
    }


    public org.harryng.demo.controller.grpc.asset.AssetRes remove(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetIdReq request)
        throws com.google.protobuf.ServiceException {
      return (org.harryng.demo.controller.grpc.asset.AssetRes) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        org.harryng.demo.controller.grpc.asset.AssetRes.getDefaultInstance());
    }


    public org.harryng.demo.controller.grpc.asset.AssetResultRes findByName(
        com.google.protobuf.RpcController controller,
        org.harryng.demo.controller.grpc.asset.AssetNameReq request)
        throws com.google.protobuf.ServiceException {
      return (org.harryng.demo.controller.grpc.asset.AssetResultRes) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        org.harryng.demo.controller.grpc.asset.AssetResultRes.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:controller.AssetController)
}

